{
  "version": 3,
  "sources": ["../../svelte-device-info/src/svelte-device-info.ts"],
  "sourcesContent": ["//----------------------------------------------------------------------------//\n//                             Svelte Device Info                             //\n//----------------------------------------------------------------------------//\n\n  const memoized:any = {}\n\n/**** DeviceIsMobile ****/\n\n  function DeviceIsMobile ():boolean {\n    if (\n// @ts-ignore TS2551 yes, I know that \"navigator.userAgentData\" is experimental\n      (typeof navigator.userAgentData === 'object') &&    // required for Safari\n// @ts-ignore TS2551 yes, I know that \"navigator.userAgentData\" is experimental\n      ('mobile' in navigator.userAgentData)\n    ) {\n// @ts-ignore TS2551 yes, I know that \"navigator.userAgentData\" is experimental\n      return navigator.userAgentData.mobile\n    } else {\n// the following code was basically taken from detectmobilebrowsers.com\n      return (function (a:string):boolean {\n        return (\n          /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n            .test(a) ||\n           /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n            .test(a.slice(0,4))\n        )\n// @ts-ignore TS7015 yes, \"window.opera\" seems to be pretty non-standard\n      })(navigator.userAgent||navigator.vendor||window.opera)\n    }\n  }\n\n/**** DeviceIsPhone ****/\n// see https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\n\n  function DeviceIsPhone ():boolean {\n    if (DeviceIsMobile()) {\n      let ViewportWidth  = window.innerWidth\n      let ViewportHeight = window.innerHeight\n\n      let smallerEdgeSize = Math.min(ViewportWidth,ViewportHeight)\n      let largerEdgeSize  = Math.max(ViewportWidth,ViewportHeight)\n\n      return (smallerEdgeSize <= 480) && (largerEdgeSize <= 896)\n    } else {\n      return false\n    }\n  }\n\n/**** touch device without support for \"pointer:coarse\"? ****/\n\n  function AppRunsOnLegacyTouchDevice ():boolean {\n    if (memoized.AppRunsOnLegacyTouchDevice == null) {\n      memoized.AppRunsOnLegacyTouchDevice = (\n        ! MediaQuery('(pointer:fine)') &&\n        ! MediaQuery('(pointer:coarse)') && ! MediaQuery('-moz-touch-enabled') &&\n        (\n          ('ontouchstart' in Window) || ((navigator.maxTouchPoints || 0) > 0) ||\n          (/touch|android|iphone|ipod|ipad/i).test(navigator.userAgent)\n        )\n      )\n    }\n\n    return memoized.AppRunsOnLegacyTouchDevice\n  }\n\n/**** DeviceCanHover (is set together with \"DevicePointingAccuracy\") ****/\n\n  function DeviceCanHover ():boolean {\n    if (memoized.DevicePointingAccuracy == null) {\n      updateDevicePointingAccuracy()\n\n      if (! DocumentIsReady() && ! memoized.waitingForLoaded) {\n        memoized.waitingForLoaded = true\n        window.addEventListener('DOMContentLoaded', updateDevicePointingAccuracy)\n                // after document is loaded, classes will be applied as foreseen\n      }\n    }\n    return memoized.DeviceCanHover                  // may change while running!\n  }\n\n/**** DevicePointingAccuracy ****/\n// Internet Explorer and MS/Edge are NOT supported\n\n  type PointingAccuracy = 'none' | 'fine' | 'coarse'\n\n  function DevicePointingAccuracy ():PointingAccuracy {\n    if (memoized.DevicePointingAccuracy == null) {\n      updateDevicePointingAccuracy()\n\n      if (! DocumentIsReady() && ! memoized.waitingForLoaded) {\n        memoized.waitingForLoaded = true\n        window.addEventListener('DOMContentLoaded', updateDevicePointingAccuracy)\n                // after document is loaded, classes will be applied as foreseen\n      }\n    }\n    return memoized.DevicePointingAccuracy          // may change while running!\n  }\n\n/**** updateDevicePointingAccuracy ****/\n\n  function updateDevicePointingAccuracy ():void {\n    memoized.DeviceCanHover = MediaQuery('(hover:hover)')\n\n    let updatedPointingAccuracy:PointingAccuracy = 'fine'\n    switch (true) {\n      case MediaQuery('(pointer:none)'):     updatedPointingAccuracy = 'none';   break\n      case MediaQuery('(pointer:coarse)'):\n      case MediaQuery('-moz-touch-enabled'):\n      case AppRunsOnLegacyTouchDevice():     updatedPointingAccuracy = 'coarse'; break\n    }\n    memoized.DevicePointingAccuracy = updatedPointingAccuracy\n\n    if (DocumentIsReady()) {\n      let ClassList = document.body.classList             // reference, not copy\n      if (\n        ((updatedPointingAccuracy === 'none')   !== ClassList.contains('noPointer'))   ||\n        ((updatedPointingAccuracy === 'fine')   !== ClassList.contains('finePointer')) ||\n        ((updatedPointingAccuracy === 'coarse') !== ClassList.contains('coarsePointer'))\n      ) {\n        document.body.classList.remove('noPointer','finePointer','coarsePointer')\n        switch (updatedPointingAccuracy) {\n          case 'none':   document.body.classList.add('noPointer');     break\n          case 'fine':   document.body.classList.add('finePointer');   break\n          case 'coarse': document.body.classList.add('coarsePointer'); break\n        }\n      }\n    }\n  }\n\n/**** onPointingAccuracyChanged ****/\n\n  function onPointingAccuracyChanged (Handler:Function):void {\n    registerHandler(Handler,false)\n  }\n\n/**** oncePointingAccuracyChanged ****/\n\n  function oncePointingAccuracyChanged (Handler:Function):void {\n    registerHandler(Handler,true)\n  }\n\n/**** offPointingAccuracyChanged ****/\n\n  function offPointingAccuracyChanged (Handler:Function):void {\n    unregisterHandler(Handler)\n  }\n\n/**** DocumentIsReady ****/\n\n  function DocumentIsReady ():boolean {\n    return (\n      (document.readyState === 'interactive') ||\n      (document.readyState === 'complete')\n    )\n  }\n\n/**** MediaQuery ****/\n\n  function MediaQuery (Query:string):boolean {\n    let MediaMatcher:any = (\n      window.matchMedia ||\n// @ts-ignore\n      window['webkitMatchmedia'] || window['mozMatchmedia'] || window['oMatchmedia']\n    )\n\n    return (MediaMatcher != null) && MediaMatcher(Query).matches\n  }\n\n/**** rewrite media query rules for legacy browsers on touch devices ****/\n\n  function ListElement (List:any, Index:number):any {\n    return (\n      typeof List.item === 'function' ? List.item(Index) : List[Index]\n    )\n  }\n\n  function ListHasElementMatching (List:any, Pattern:RegExp):boolean {\n    for (let i = 0, l = List.length; i < l; i++) {\n      if (Pattern.test(ListElement(List,i))) { return true }\n    }\n    return false\n  }\n\n  function rewriteMediaQueriesOnLegacyTouchDevices ():void {\n    if (memoized.MediaQueriesHaveBeenRewritten) { return }\n\n    if (AppRunsOnLegacyTouchDevice()) {\n      if (DocumentIsReady()) {\n        let Stylesheets = document.styleSheets            // reference, not copy\n        for (let i = 0, l = Stylesheets.length; i < l; i++) {\n          let Rules = Stylesheets[i]['cssRules'] || Stylesheets[i]['rules']\n          for (let j = 0, k = Rules.length; j < k; j++) {\n            let Rule:CSSRule = Rules[j]\n            if (Rule.type === CSSRule.MEDIA_RULE) {\n              if (ListHasElementMatching((Rule as CSSMediaRule).media, /handheld/i)) {\n                let Media = (Rule as CSSMediaRule).media  // reference, not copy\n                Media.mediaText = Media.mediaText.replace('handheld', 'screen')\n              }\n            }\n          }\n        }\n\n      /**** rewrite media-dependent links for legacy browsers ****/\n\n        let Links = document.getElementsByTagName('link')\n        for (let i = 0, l = Links.length; i < l; i++) {\n          let Link = Links[i]\n          if ((/handheld/i).test(Link.media)) {\n            Link.media = Link.media.replace('handheld', 'screen')\n          }\n        }\n\n        memoized.MediaQueriesHaveBeenRewritten = true\n      } else {\n        window.addEventListener('DOMContentLoaded', rewriteMediaQueriesOnLegacyTouchDevices)\n      }\n    }\n  }\n\n/**** Event Handler Registry ****/\n\n  type SDI_EventHandlerRecord   = { Handler:Function, onceOnly:boolean }\n  type SDI_EventHandlerRegistry = SDI_EventHandlerRecord[]\n\n/**** registerHandler ****/\n\n  function registerHandler (Handler:Function, onceOnly:boolean):void {\n    if (typeof Handler !== 'function') {\n      throw new Error('handler function expected')\n    }\n\n    if (memoized.EventHandlerRegistry == null) {\n      memoized.EventHandlerRegistry = []\n    }\n    let EventHandlerRegistry:SDI_EventHandlerRegistry = memoized.EventHandlerRegistry  // ref., not copy!\n\n    for (let i = 0, l = EventHandlerRegistry.length; i < l; i++) {\n      if (EventHandlerRegistry[i].Handler === Handler) {\n        EventHandlerRegistry[i].onceOnly = onceOnly\n        return\n      }\n    }\n\n    EventHandlerRegistry.push({ Handler, onceOnly })\n\n    if (EventHandlerRegistry.length === 1) {\n      observePointingAccuracy()\n    }\n  }\n\n/**** unregisterHandler ****/\n\n  function unregisterHandler (Handler:Function):void {\n    if (memoized.EventHandlerRegistry == null) {\n      memoized.EventHandlerRegistry = []\n    }\n    let EventHandlerRegistry:SDI_EventHandlerRegistry = memoized.EventHandlerRegistry  // ref., not copy!\n\n    for (let i = 0, l = EventHandlerRegistry.length; i < l; i++) {\n      if (EventHandlerRegistry[i].Handler === Handler) {\n        EventHandlerRegistry.splice(i,1)\n        break\n      }\n    }\n\n    if (EventHandlerRegistry.length === 0) {\n      unobservePointingAccuracy()\n    }\n  }\n\n/**** observePointingAccuracy (e.g., on \"convertibles\") ****/\n\n  function observePointingAccuracy ():void {\n    memoized.AccuracyPoller = setInterval(() => {\n      let oldPointingAccuracy = DevicePointingAccuracy()\n        updateDevicePointingAccuracy()\n      if (DevicePointingAccuracy() !== oldPointingAccuracy) {\n        invokeRegisteredHandlers()\n      }\n    },500)\n  }\n\n/**** unobservePointingAccuracy ****/\n\n  function unobservePointingAccuracy ():void {\n    clearInterval(memoized.AccuracyPoller)\n    memoized.AccuracyPoller = undefined\n  }\n\n/**** invokeRegisteredHandlers ****/\n\n  function invokeRegisteredHandlers ():void {\n    if (memoized.EventHandlerRegistry == null) {\n      memoized.EventHandlerRegistry = []\n    }\n    let EventHandlerRegistry = memoized.EventHandlerRegistry  // ref., not copy!\n\n    for (let i = 0, l = EventHandlerRegistry.length; i < l; i++) {\n      let { Handler, onceOnly } = EventHandlerRegistry[i]\n\n      try {\n        Handler(DevicePointingAccuracy())\n      } catch (Signal) {\n        console.warn('PointingAccuracy observation function failed with',Signal)\n      }\n\n      if (onceOnly) { unregisterHandler(Handler) } // a bit inefficient, but DRY\n    }\n  }\n\n  export default {\n    get isMobile () { return DeviceIsMobile() },\n    get isPhone ()  { return DeviceIsPhone() },\n    get isTablet () { return DeviceIsMobile() && ! DeviceIsPhone() },\n\n    get isLegacyTouchDevice () { return AppRunsOnLegacyTouchDevice() },\n    rewriteMediaQueriesOnLegacyTouchDevices,\n\n    get PointingAccuracy () { return DevicePointingAccuracy() },\n    get canHover ()         { return DeviceCanHover() },\n\n    onPointingAccuracyChanged,\n    oncePointingAccuracyChanged,\n    offPointingAccuracyChanged,\n\n    get observesPointingAccuracy () { return (memoized.AccuracyPoller != null) }\n  }\n\n"],
  "mappings": "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",
  "names": ["memoized", "DeviceIsMobile", "navigator", "userAgentData", "mobile", "a", "userAgent", "vendor", "window", "opera", "test", "slice", "DeviceIsPhone", "ViewportWidth", "innerWidth", "ViewportHeight", "innerHeight", "smallerEdgeSize", "Math", "min", "largerEdgeSize", "max", "AppRunsOnLegacyTouchDevice", "MediaQuery", "Window", "maxTouchPoints", "DevicePointingAccuracy", "updateDevicePointingAccuracy", "DocumentIsReady", "waitingForLoaded", "addEventListener", "DeviceCanHover", "updatedPointingAccuracy", "ClassList", "document", "body", "classList", "contains", "remove", "add", "readyState", "Query", "MediaMatcher", "matchMedia", "matches", "ListElement", "List", "Index", "item", "ListHasElementMatching", "Pattern", "i", "l", "length", "registerHandler", "Handler", "onceOnly", "Error", "EventHandlerRegistry", "push", "AccuracyPoller", "setInterval", "oldPointingAccuracy", "_a", "Signal", "console", "warn", "unregisterHandler", "invokeRegisteredHandlers", "splice", "clearInterval", "svelteDeviceInfo", "isMobile", "isPhone", "isTablet", "isLegacyTouchDevice", "rewriteMediaQueriesOnLegacyTouchDevices", "MediaQueriesHaveBeenRewritten", "Stylesheets", "styleSheets", "Rules", "j", "k", "Rule", "type", "CSSRule", "MEDIA_RULE", "media", "Media", "mediaText", "replace", "Links", "getElementsByTagName", "Link", "PointingAccuracy", "canHover", "onPointingAccuracyChanged", "oncePointingAccuracyChanged", "offPointingAccuracyChanged", "observesPointingAccuracy"]
}
